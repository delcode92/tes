yg dikomen & yg ditambahkan agar pebih simple saat proses dev

==> pada main_newgui2

# create thread for connect to server
# start_new_thread(self.connect_to_server, ( sys.argv[1], sys.argv[2] ))

==> pada main_newgui2

komentari yg ini:
# m.Login()()


pada admin dashboard ditambah kode yg ini agar app gui ny jalan:
sys.exit(self.app.exec_())
self.windowBarAction("kelola laporan")


lalu tambah yg ini:
m.AdminDashboard()


==============================================================================================

logika filter laporan:

1. tgl1 dan tgl2 dibutuhkan utk membuat range, secara default akan terpilih current date
    karena menggunakan between utk datetime maka harus di cast dulu ke date

2. filter hal yg lain, jika form filter yg lain diisi



CREATE TABLE my_table (
    id SERIAL PRIMARY KEY,
    duration INTERVAL
);

INSERT INTO my_table (duration)
VALUES ('1 day 2 hours 30 minutes 15 seconds');


==================================================================================================

cara print result query, dengan menggunakan name dari col nya
jika "cols_res" passed pada method exec_query(), maka akan dibuat list secara otomnatis
yg nantinya berisi nama2 cols berdasarkan text queryny
kemudian nama2 cols tersebut akan di find nomor indexnya dengan perintah ===> cols.index('....')

cols,res = self.exec_query("select * from tarif order by id", "cols_res")
                    
tipe_tarif = str(res[0][cols.index('tipe_tarif')])
toleransi = str(res[0][cols.index('toleransi')])
rules_mtr = json.loads( str(res[0][cols.index('base_rules')]) )
rules_mbl = json.loads( str(res[1][cols.index('base_rules')]) )


I have two QPushButton, one is previous button, and the last one is next button 
those buttons is for set table result based on offset limit

and I have one QLabel that shows us how many data shows from total data

for example in my table in database has 51 rows of data, I want limit the max result is only 18 rows of data

for first time program running it will show 1-18 rows of my table
in QLabel, will be setText("1-18 from 51 results")

if next button pressed it will give 19-36 rows of my table
in QLabel, will be setText("19-36 from 51 results")

if next button pressed again it will give 36-51 rows of my table
in QLabel, will be setText("36-51 from 51 results")

and if prev button is pressed, it will works the other way around


create pyton code that could perform like my description above